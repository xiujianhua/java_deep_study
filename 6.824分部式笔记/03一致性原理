#### 性能 performance
  人们涉及大型分布式系统的或者大型存储系统的初衷是为了获得巨大的性能，通过利用数百台机器资源来完成海量的工作
#### 分片 sharding
接着我们就应该思考如何将数据拆分到很多服务器上，这样就能通过很多服务器并行的读取数据）
#### 故障 faults
如果将数据切片并分发到数百台或数千台服务器上，错误发生得到概率将变得很大
#### 容错性 tolerance
不可能总让人工纠错，所以我们需要自动容错系统
#### 复制 replication
获得容错性的有效方式就是复制，即保留2-3个数据副本
#### 数据不一致 inconsistency
如果你有两个副本，那么你一不小心，他们就会不同步
#### 一致性 consistency
采用一些崇聪明的设计，可以摆脱数据不一致带来的问题，这让数据看起来一致
#### 低性能 low performance
为保持数据的一致性，服务器之间需要更多的通讯，这降低了性能


### 总结： 
1. 如果你要获得良好的一致性，那么作为代价，你就得牺牲掉一些性能。
2. 如果不想牺牲性能，你就得忍受系统偶尔出现的异常
3. 人们很少会愿意为了去拥有非常优秀的一致性而付出高额的成本

 
